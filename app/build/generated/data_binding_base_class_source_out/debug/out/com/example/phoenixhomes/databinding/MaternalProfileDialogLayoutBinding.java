// Generated by view binder compiler. Do not edit!
package com.example.phoenixhomes.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.phoenixhomes.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class MaternalProfileDialogLayoutBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final EditText addressHolder1;

  @NonNull
  public final EditText ageHolder1;

  @NonNull
  public final EditText ancHolder1;

  @NonNull
  public final EditText eddHolder1;

  @NonNull
  public final EditText educationHolder1;

  @NonNull
  public final EditText gravidaHolder1;

  @NonNull
  public final EditText heightHolder1;

  @NonNull
  public final EditText institutionHolder1;

  @NonNull
  public final EditText lmpHolder1;

  @NonNull
  public final EditText maritalHolder1;

  @NonNull
  public final EditText mflHolder1;

  @NonNull
  public final EditText nameHolder1;

  @NonNull
  public final EditText nextOfKinphoneHolder1;

  @NonNull
  public final EditText nextofKinHolder1;

  @NonNull
  public final EditText parityHolder1;

  @NonNull
  public final EditText pncHolder1;

  @NonNull
  public final EditText relationshipHolder1;

  @NonNull
  public final Button submit;

  @NonNull
  public final EditText telephoneHolder1;

  @NonNull
  public final EditText weightHolder1;

  private MaternalProfileDialogLayoutBinding(@NonNull LinearLayout rootView,
      @NonNull EditText addressHolder1, @NonNull EditText ageHolder1, @NonNull EditText ancHolder1,
      @NonNull EditText eddHolder1, @NonNull EditText educationHolder1,
      @NonNull EditText gravidaHolder1, @NonNull EditText heightHolder1,
      @NonNull EditText institutionHolder1, @NonNull EditText lmpHolder1,
      @NonNull EditText maritalHolder1, @NonNull EditText mflHolder1, @NonNull EditText nameHolder1,
      @NonNull EditText nextOfKinphoneHolder1, @NonNull EditText nextofKinHolder1,
      @NonNull EditText parityHolder1, @NonNull EditText pncHolder1,
      @NonNull EditText relationshipHolder1, @NonNull Button submit,
      @NonNull EditText telephoneHolder1, @NonNull EditText weightHolder1) {
    this.rootView = rootView;
    this.addressHolder1 = addressHolder1;
    this.ageHolder1 = ageHolder1;
    this.ancHolder1 = ancHolder1;
    this.eddHolder1 = eddHolder1;
    this.educationHolder1 = educationHolder1;
    this.gravidaHolder1 = gravidaHolder1;
    this.heightHolder1 = heightHolder1;
    this.institutionHolder1 = institutionHolder1;
    this.lmpHolder1 = lmpHolder1;
    this.maritalHolder1 = maritalHolder1;
    this.mflHolder1 = mflHolder1;
    this.nameHolder1 = nameHolder1;
    this.nextOfKinphoneHolder1 = nextOfKinphoneHolder1;
    this.nextofKinHolder1 = nextofKinHolder1;
    this.parityHolder1 = parityHolder1;
    this.pncHolder1 = pncHolder1;
    this.relationshipHolder1 = relationshipHolder1;
    this.submit = submit;
    this.telephoneHolder1 = telephoneHolder1;
    this.weightHolder1 = weightHolder1;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static MaternalProfileDialogLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static MaternalProfileDialogLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.maternal_profile_dialog_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static MaternalProfileDialogLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.addressHolder1;
      EditText addressHolder1 = ViewBindings.findChildViewById(rootView, id);
      if (addressHolder1 == null) {
        break missingId;
      }

      id = R.id.ageHolder1;
      EditText ageHolder1 = ViewBindings.findChildViewById(rootView, id);
      if (ageHolder1 == null) {
        break missingId;
      }

      id = R.id.ancHolder1;
      EditText ancHolder1 = ViewBindings.findChildViewById(rootView, id);
      if (ancHolder1 == null) {
        break missingId;
      }

      id = R.id.eddHolder1;
      EditText eddHolder1 = ViewBindings.findChildViewById(rootView, id);
      if (eddHolder1 == null) {
        break missingId;
      }

      id = R.id.educationHolder1;
      EditText educationHolder1 = ViewBindings.findChildViewById(rootView, id);
      if (educationHolder1 == null) {
        break missingId;
      }

      id = R.id.gravidaHolder1;
      EditText gravidaHolder1 = ViewBindings.findChildViewById(rootView, id);
      if (gravidaHolder1 == null) {
        break missingId;
      }

      id = R.id.heightHolder1;
      EditText heightHolder1 = ViewBindings.findChildViewById(rootView, id);
      if (heightHolder1 == null) {
        break missingId;
      }

      id = R.id.institutionHolder1;
      EditText institutionHolder1 = ViewBindings.findChildViewById(rootView, id);
      if (institutionHolder1 == null) {
        break missingId;
      }

      id = R.id.lmpHolder1;
      EditText lmpHolder1 = ViewBindings.findChildViewById(rootView, id);
      if (lmpHolder1 == null) {
        break missingId;
      }

      id = R.id.maritalHolder1;
      EditText maritalHolder1 = ViewBindings.findChildViewById(rootView, id);
      if (maritalHolder1 == null) {
        break missingId;
      }

      id = R.id.mflHolder1;
      EditText mflHolder1 = ViewBindings.findChildViewById(rootView, id);
      if (mflHolder1 == null) {
        break missingId;
      }

      id = R.id.nameHolder1;
      EditText nameHolder1 = ViewBindings.findChildViewById(rootView, id);
      if (nameHolder1 == null) {
        break missingId;
      }

      id = R.id.nextOfKinphoneHolder1;
      EditText nextOfKinphoneHolder1 = ViewBindings.findChildViewById(rootView, id);
      if (nextOfKinphoneHolder1 == null) {
        break missingId;
      }

      id = R.id.nextofKinHolder1;
      EditText nextofKinHolder1 = ViewBindings.findChildViewById(rootView, id);
      if (nextofKinHolder1 == null) {
        break missingId;
      }

      id = R.id.parityHolder1;
      EditText parityHolder1 = ViewBindings.findChildViewById(rootView, id);
      if (parityHolder1 == null) {
        break missingId;
      }

      id = R.id.pncHolder1;
      EditText pncHolder1 = ViewBindings.findChildViewById(rootView, id);
      if (pncHolder1 == null) {
        break missingId;
      }

      id = R.id.relationshipHolder1;
      EditText relationshipHolder1 = ViewBindings.findChildViewById(rootView, id);
      if (relationshipHolder1 == null) {
        break missingId;
      }

      id = R.id.submit;
      Button submit = ViewBindings.findChildViewById(rootView, id);
      if (submit == null) {
        break missingId;
      }

      id = R.id.telephoneHolder1;
      EditText telephoneHolder1 = ViewBindings.findChildViewById(rootView, id);
      if (telephoneHolder1 == null) {
        break missingId;
      }

      id = R.id.weightHolder1;
      EditText weightHolder1 = ViewBindings.findChildViewById(rootView, id);
      if (weightHolder1 == null) {
        break missingId;
      }

      return new MaternalProfileDialogLayoutBinding((LinearLayout) rootView, addressHolder1,
          ageHolder1, ancHolder1, eddHolder1, educationHolder1, gravidaHolder1, heightHolder1,
          institutionHolder1, lmpHolder1, maritalHolder1, mflHolder1, nameHolder1,
          nextOfKinphoneHolder1, nextofKinHolder1, parityHolder1, pncHolder1, relationshipHolder1,
          submit, telephoneHolder1, weightHolder1);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
