// Generated by view binder compiler. Do not edit!
package com.example.phoenixhomes.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.phoenixhomes.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ImapairmentsAndDisabilitiesLayoutBinding implements ViewBinding {
  @NonNull
  private final CardView rootView;

  @NonNull
  public final TextView armsAndShouldersNormaltyHolder;

  @NonNull
  public final TextView babyAnusAndGenitaliaHolder;

  @NonNull
  public final TextView babyBackHolder;

  @NonNull
  public final TextView babyHeadHolder;

  @NonNull
  public final TextView babyStiffnesLyingHolder;

  @NonNull
  public final TextView jointsMovementsHolder;

  @NonNull
  public final TextView limbAbnormalityHolder;

  @NonNull
  public final TextView limbNormalityHolder;

  @NonNull
  public final TextView mouthAbnormalitiesHolder;

  @NonNull
  public final TextView muscleToneHolder;

  @NonNull
  public final TextView noOfFingersAndToesHolder;

  private ImapairmentsAndDisabilitiesLayoutBinding(@NonNull CardView rootView,
      @NonNull TextView armsAndShouldersNormaltyHolder,
      @NonNull TextView babyAnusAndGenitaliaHolder, @NonNull TextView babyBackHolder,
      @NonNull TextView babyHeadHolder, @NonNull TextView babyStiffnesLyingHolder,
      @NonNull TextView jointsMovementsHolder, @NonNull TextView limbAbnormalityHolder,
      @NonNull TextView limbNormalityHolder, @NonNull TextView mouthAbnormalitiesHolder,
      @NonNull TextView muscleToneHolder, @NonNull TextView noOfFingersAndToesHolder) {
    this.rootView = rootView;
    this.armsAndShouldersNormaltyHolder = armsAndShouldersNormaltyHolder;
    this.babyAnusAndGenitaliaHolder = babyAnusAndGenitaliaHolder;
    this.babyBackHolder = babyBackHolder;
    this.babyHeadHolder = babyHeadHolder;
    this.babyStiffnesLyingHolder = babyStiffnesLyingHolder;
    this.jointsMovementsHolder = jointsMovementsHolder;
    this.limbAbnormalityHolder = limbAbnormalityHolder;
    this.limbNormalityHolder = limbNormalityHolder;
    this.mouthAbnormalitiesHolder = mouthAbnormalitiesHolder;
    this.muscleToneHolder = muscleToneHolder;
    this.noOfFingersAndToesHolder = noOfFingersAndToesHolder;
  }

  @Override
  @NonNull
  public CardView getRoot() {
    return rootView;
  }

  @NonNull
  public static ImapairmentsAndDisabilitiesLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ImapairmentsAndDisabilitiesLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.imapairments_and_disabilities_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ImapairmentsAndDisabilitiesLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.armsAndShouldersNormaltyHolder;
      TextView armsAndShouldersNormaltyHolder = ViewBindings.findChildViewById(rootView, id);
      if (armsAndShouldersNormaltyHolder == null) {
        break missingId;
      }

      id = R.id.babyAnusAndGenitaliaHolder;
      TextView babyAnusAndGenitaliaHolder = ViewBindings.findChildViewById(rootView, id);
      if (babyAnusAndGenitaliaHolder == null) {
        break missingId;
      }

      id = R.id.babyBackHolder;
      TextView babyBackHolder = ViewBindings.findChildViewById(rootView, id);
      if (babyBackHolder == null) {
        break missingId;
      }

      id = R.id.babyHeadHolder;
      TextView babyHeadHolder = ViewBindings.findChildViewById(rootView, id);
      if (babyHeadHolder == null) {
        break missingId;
      }

      id = R.id.babyStiffnesLyingHolder;
      TextView babyStiffnesLyingHolder = ViewBindings.findChildViewById(rootView, id);
      if (babyStiffnesLyingHolder == null) {
        break missingId;
      }

      id = R.id.jointsMovementsHolder;
      TextView jointsMovementsHolder = ViewBindings.findChildViewById(rootView, id);
      if (jointsMovementsHolder == null) {
        break missingId;
      }

      id = R.id.limbAbnormalityHolder;
      TextView limbAbnormalityHolder = ViewBindings.findChildViewById(rootView, id);
      if (limbAbnormalityHolder == null) {
        break missingId;
      }

      id = R.id.limbNormalityHolder;
      TextView limbNormalityHolder = ViewBindings.findChildViewById(rootView, id);
      if (limbNormalityHolder == null) {
        break missingId;
      }

      id = R.id.mouthAbnormalitiesHolder;
      TextView mouthAbnormalitiesHolder = ViewBindings.findChildViewById(rootView, id);
      if (mouthAbnormalitiesHolder == null) {
        break missingId;
      }

      id = R.id.muscleToneHolder;
      TextView muscleToneHolder = ViewBindings.findChildViewById(rootView, id);
      if (muscleToneHolder == null) {
        break missingId;
      }

      id = R.id.noOfFingersAndToesHolder;
      TextView noOfFingersAndToesHolder = ViewBindings.findChildViewById(rootView, id);
      if (noOfFingersAndToesHolder == null) {
        break missingId;
      }

      return new ImapairmentsAndDisabilitiesLayoutBinding((CardView) rootView,
          armsAndShouldersNormaltyHolder, babyAnusAndGenitaliaHolder, babyBackHolder,
          babyHeadHolder, babyStiffnesLyingHolder, jointsMovementsHolder, limbAbnormalityHolder,
          limbNormalityHolder, mouthAbnormalitiesHolder, muscleToneHolder,
          noOfFingersAndToesHolder);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
