// Generated by view binder compiler. Do not edit!
package com.example.phoenixhomes.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.phoenixhomes.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class HealthRecordLayoutBinding implements ViewBinding {
  @NonNull
  private final CardView rootView;

  @NonNull
  public final TextView datteHolder;

  @NonNull
  public final TextView facilityHolder;

  @NonNull
  public final TextView facilityListHolder;

  @NonNull
  public final TextView healthfacilityHolder;

  @NonNull
  public final TextView notificationNoHolder;

  @NonNull
  public final TextView registerNoHolder;

  @NonNull
  public final TextView welfareHolder;

  private HealthRecordLayoutBinding(@NonNull CardView rootView, @NonNull TextView datteHolder,
      @NonNull TextView facilityHolder, @NonNull TextView facilityListHolder,
      @NonNull TextView healthfacilityHolder, @NonNull TextView notificationNoHolder,
      @NonNull TextView registerNoHolder, @NonNull TextView welfareHolder) {
    this.rootView = rootView;
    this.datteHolder = datteHolder;
    this.facilityHolder = facilityHolder;
    this.facilityListHolder = facilityListHolder;
    this.healthfacilityHolder = healthfacilityHolder;
    this.notificationNoHolder = notificationNoHolder;
    this.registerNoHolder = registerNoHolder;
    this.welfareHolder = welfareHolder;
  }

  @Override
  @NonNull
  public CardView getRoot() {
    return rootView;
  }

  @NonNull
  public static HealthRecordLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static HealthRecordLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.health_record_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static HealthRecordLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.datteHolder;
      TextView datteHolder = ViewBindings.findChildViewById(rootView, id);
      if (datteHolder == null) {
        break missingId;
      }

      id = R.id.facilityHolder;
      TextView facilityHolder = ViewBindings.findChildViewById(rootView, id);
      if (facilityHolder == null) {
        break missingId;
      }

      id = R.id.facilityListHolder;
      TextView facilityListHolder = ViewBindings.findChildViewById(rootView, id);
      if (facilityListHolder == null) {
        break missingId;
      }

      id = R.id.healthfacilityHolder;
      TextView healthfacilityHolder = ViewBindings.findChildViewById(rootView, id);
      if (healthfacilityHolder == null) {
        break missingId;
      }

      id = R.id.notificationNoHolder;
      TextView notificationNoHolder = ViewBindings.findChildViewById(rootView, id);
      if (notificationNoHolder == null) {
        break missingId;
      }

      id = R.id.registerNoHolder;
      TextView registerNoHolder = ViewBindings.findChildViewById(rootView, id);
      if (registerNoHolder == null) {
        break missingId;
      }

      id = R.id.welfareHolder;
      TextView welfareHolder = ViewBindings.findChildViewById(rootView, id);
      if (welfareHolder == null) {
        break missingId;
      }

      return new HealthRecordLayoutBinding((CardView) rootView, datteHolder, facilityHolder,
          facilityListHolder, healthfacilityHolder, notificationNoHolder, registerNoHolder,
          welfareHolder);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
